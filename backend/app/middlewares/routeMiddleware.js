// importing node modules
const mongoose = require('mongoose');
const shortId = require('short-id');

// importing libs
const response = require('./../libs/responseLib');
const logger = require('./../libs/loggerLib');
const tokenLib = require('./../libs/tokenLib');

// importing mongoose modules
const Auth = mongoose.model('Auth');
const User = mongoose.model('User');

// a middleware to verify the signature and expiry of the authToken and extract user data from it.
let verifyAuthToken = function (req, res, next) {
    if (req.body.authToken) {
        // verify if the token was generated by the server or not
        Auth.findOne({ authToken: req.body.authToken })
            .lean()
            .exec((err, result) => {
                if (err) {
                    let apiResponse = response.generate(true, 'Internal server error', 500, null);
                    res.send(apiResponse);
                } else if (result) {
                    // verify token secret and expiry
                    tokenLib.verifyToken(req.body.authToken, (err, decoded) => {
                        if (err) {
                            let apiResponse = response.generate(true, 'Invalid or Expired token', 403, null);
                            res.send(apiResponse);
                        } else {
                            req.user = decoded.user;
                            next();
                        }
                    });
                } else {
                    let apiResponse = response.generate(true, 'Invalid Auth Token', 403, null);
                    res.send(apiResponse);
                }
            });
    } else {
        let apiResponse = response.generate(true, 'Auth Token Missing', 403, null);
        res.send(apiResponse);
    }
};

let verifyPassResetToken = function (req, res, next) {
    if (req.body.authToken) {
        // verify if the token was generated by the server
        User.findOne({ passwordResetToken: req.body.authToken })
            .lean()
            .exec((err, result) => {
                if (err) {
                    let apiResponse = response.generate(true, 'Internal server error', 500, null);
                    res.send(apiResponse);
                } else if (result) {
                    // verify secret and expiry
                    tokenLib.verifyToken(req.body.authToken, (err, decoded) => {
                        if (err) {
                            let apiResponse = response.generate(true, 'Invalid or Expired token', 403, null);
                            res.send(apiResponse);
                        } else {
                            req.user = decoded.user;
                            next();
                        }
                    });
                } else {
                    let apiResponse = response.generate(true, 'Invalid Auth token', 403, null);
                }
            });
    } else {
        let apiResponse = response.generate(true, 'Auth token missing', 403, null);
        res.send(apiResponse;)
    }
};

module.exports = {
    verifyAuthToken: verifyAuthToken,
    verifyPassResetToken: verifyPassResetToken
};
